1 архитектура: 
	- ты используешь vue как нечто для рисования компоненток, которые работают на принципах MVC. Нужно отрефактирить таким образом, чтобы .Net Core был для рисования основной страницы, например, страница Сотрудники:
		* .Net Core отдает страницу Собрудники с бандлом, который рисует корневой компонент - список сотрудников
		* vue получает ДАННЫЕ (!!!!) для таблицы от Core проекта
		* диалоги редактирования, удаления, подтверждения чисто на vue с получение ДАННЫХ для редактирования по ид с веб апи
	- разнеси логически слои:
		* слой моделей
		* слой репозитариев
		* слой сервисов с бизнесс-логикой, если таковые напишешь
	- попробуй создать статический класс для параметров из *.config и используй его для доступа к настройкам - избавишься от размащанных magic numbers по коду
	- унифицируй создание коннекции к бд
	- не бросай пустые catch, пользователю нужно давать понять, что что-то поизошло
	- не смешивай зоны ответственности: модель должна содержать данные, а не запрашивать их из БД
	- старайся обойтись без конкатенации строк - это медленно и ресурсоемко

2 vue:
	- используй глобальные переменные для путей - это спасет тебя при рефакторинге
	- выноси общий код в отдельный js для переиспользования
	- используй мощь css, а не js логику на even

3 по заданиям:
	- серверная фильтраиця/пагинация
	- научись писать скрипты, которые тебе разом отдадут все нужные данные для фронта
	- передавай модель в методы контроллера, чтобы не было огромного количества параметров